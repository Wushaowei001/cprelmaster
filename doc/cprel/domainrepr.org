#+TITLE:     Constraint Programming on Relations: theory, practice and implementation.
#+AUTHOR:    Gustavo Gutierrez
#+EMAIL:     gustavo.ggutierrez@gmail.com
#+DATE:      2011-10-29 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil pri:nil tags:not-in-toc
#+OPTIONS:   TeX:t LaTeX:t toc:t todo:t
#+LaTeX_CLASS: report
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+LATEX_HEADER: \usepackage{amsmath}

#+LATEX_HEADER: \newcommand{\incl}[2]{\ensuremath{\operatorname{include}(#1,#2)}}
#+LATEX_HEADER: \newcommand{\excl}[2]{\ensuremath{\operatorname{exclude}(#1,#2)}}
#+LATEX_HEADER: \newcommand{\glb}[1]{\ensuremath{\operatorname{glb}(#1)}}
#+LATEX_HEADER: \newcommand{\lub}[1]{\ensuremath{\operatorname{lub}(#1)}}
#+LATEX_HEADER: \newcommand{\compl}[1]{\ensuremath{\overline{#1}}}

#+LATEX_HEADER: \newcommand{\pair}[2]{\ensuremath{\langle #1, #2 \rangle}}

#+LATEX_HEADER: \newcommand{\universe}[1]{\ensuremath{\mathcal{U}_{#1}}}
#+LATEX_HEADER: \newcommand{\emptyrel}[1]{\ensuremath{\emptyset_{#1}}}

#+LATEX_HEADER: \newcommand{\perm}[2]{\ensuremath{#1\leftrightarrow_{\operatorname{#2}}}} 
#+LATEX_HEADER: \newcommand{\proj}[2]{\ensuremath{\operatorname{Proj}_{#2}(#1)}} 
#+LATEX_HEADER: \newcommand{\suffix}[2]{\ensuremath{\operatorname{suffix}(#1,#2)}}
#+LATEX_HEADER: \newcommand{\prefix}[2]{\ensuremath{\operatorname{prefix}(#1,#2)}}
#+LATEX_HEADER: \newcommand{\arity}[1]{\ensuremath{\operatorname{arity}(#1)}}
 

* The relation constraint domain
** TODO Domain definition
*** TODO Define concepts:
    - Tuple, arity, prefix and suffix operations. Suffix is used in the
      definition of the projection constraint.
    - Permutation of a tuple (used in the permutation constraint definition)
    - Universe
*** TODO Define operations on relations:
    the following operations on relations because they are used
    further in the document.
    - Intersection
    - Complement
*** TODO Define operations on variables
    - Inclusion of a relation
    - Exclusion of a relation
** Domain representation using /BDDs/
   This section describes how the domain of a relation decision
   variable is represented by using /Binary Decision Diagrams/ (BDDs).
*** Required /BDD/  operations
    The domain representation for the relation constraint system
    relies on that a set of operations are provided by a /BDD/
    implementation. We tried to keep the number of operations at the
    minimum to facilitate the use of several libraries.
    
    The main development uses /CUDD/ as the underlying /BDD/ library
    but it only requires the following operations from it:
    - The basic operations defined in the /BDD/ literature:
      - create and retrieve variables at/from given possitions
      - access to the /then/ and /else/ branches of a node
      - logic operations (e.g, and, not)
      - create /cubes/
      - get one minterm inside a /BDD/.
    - Operations:
      - Permutation
      - Existential and universal quantification
   
*** Relation representation
    The representation for ground relations and the operations we need
    on them are implemented on top of this /API/. The implementation
    also uses software engineering patterns that abstract the way this
    representation is done. With this is even possible to use a
    complete different representation that does not uses /BDDs/.

    A /BDD/ will represent the function $R(Enc(t)) \rightarrow
    \{0,1\}$, where $t$ is a tuple and $Enc$ is a function that
    encodes the elements of it in binary form. The reason for $Enc$ is
    that a /BDD/ can only represent functions of the form
    $R(\{0,1\}^{m})\rightarrow \{0,1\}$.

    There are several possibilities for $Enc$. For instance:
    \begin{align*}
    Enc&(\langle t_0,t_1,\ldots,t_{n-1} \rangle) = \\
    &\langle e_{0,1},e_{0,2},\ldots,e_{0,i-1}, e_{1,1},e_{1,2},\ldots, e_{1,i-1},\ldots,
    e_{n-1,1},e_{n-1,2},\ldots,e_{n-1,i-1}\rangle
    \end{align*}

    In this case we use $i$ bits to encode every element of the tuple
    in its binary form. Then, $e_{n-1,i-1}$ reffers to the last bit of
    the encoding of the last element of the tuple. The parameter $i$
    must be choosen carefully to avoid any kind of overflow. In
    practice, this parameter can be the number of bits used to
    represent an integer. With this, we ensure that any machine
    integer can be represented as part of a relation.

    When the /BDD/ is seen as a graph, this encode will produce a path
    in it that goes from the root to terminal /true/. In this path,
    the first $i$ variables represent the the first column, the next
    $i$ the second and so on. A consequence of this encoding is that
    the complexity of the operations on a relation will be in terms of
    the size of the representation and not in terms of the tuples it
    contains.

*** General /BDD/ desgin
     It is important to know the generalities of a /BDD/ library in
     order to understand the points of interaction with the constraint
     system. A common technique is to allow sharing of information
     across /BDDs/. For this, all the /BDDs/ are represented in the
     same memory space and there is an entity, called /manager/, in
     charge of it.

     The /manager/ has several responsibilities, for instance,
     variable permutation and the garbage collection of the auxiliar
     data structures.

     The other entity in the design is a /BDD/ itself. This entity
     provides the common operations on /BDDs/. For instance,
     conjunction, complement, etc.

     As all the relations will be stored by the same manager we need to take into account the maximum arity 
     
** Constraints
   This chapter describes the constraints of the relation domain.   
*** Set-like constraints
    From its mathematical definition, a relation is a set of
    tuples. As such, it is possible to define constraints on relation
    decision variables that enforce propoerties related with set
    semantics. In this seciton we present these constraints. 

    All of the constraint in this section are defined on relations of
    the same arity. This is a direct consequence of the fact that we
    are dealing with set semantics.

**** TODO Equality
     This constraint enforces the equality of two relations $A$ and
     $B$. Both relations must have the same arity for the constraint
     to be well defined. It enforces that a tuple can be in a relation
     if and only if it is in the other:
     
     \begin{align*}
     A=B \equiv \forall t : t \in A \iff t \in B
     \end{align*}

     To enforce the semantics of this constraint the following
     progation rules are applied:
     
     - $\incl{A}{\glb{B}}$
     - $\incl{B}{\glb{A}}$
     - $\excl{A}{\overline{\lub{A}\cap \lub{B}}}$
     - $\excl{B}{\overline{\lub{A}\cap \lub{B}}}$
     
     The entailment condition for this constraint is:
**** TODO Complement
     The complement constraint ensures that a relation $A$ has as
     complement relation $B$. This is only define for relations of the
     same arity and is defined as:
     \begin{align*}
     A = \compl{B} \equiv \forall t : t \in A \iff t \notin B
     \end{align*}

     The propagation rules and entailment condition for this
     constraint are ommited as they can be easily deduced. Actually
     they are orthogonal to the ones of the equality constraint.
     
**** TODO Intersection
**** TODO Other constraints
     It is possible to define other constraints based on the ones we
     presented. For instance, other set properties like /union/ can be
     derived. Moreover, because of the equivalence between set theory
     and bool algebra, we can define more of them. The following table
     presents constraints that are constructed in terms of the ones
     presented before.
     
     | *Constraint*                  | *Equivalence*                        |
     | A \subseteq B                 | A \cap \compl{B} = \emptyrel{n}      |
     | A \cup B =  C                 | \compl{A} \cap \compl{B} = \compl{C} |
     | \operatorname{disjoint}(A, B) | A \cap B = \emptyrel{n}              |
     | A \implies B \equiv C         | A \cap \compl{B} = \compl{C}         |
       
     For some of the definitions above we use the symbol $\emptyrel{}$
     to denote the empty relation. To be strict on this definition, we
     use the subindex $n$ to denote that it is the empty relation of
     that arity. The constraints we have defined in this section
     assume that all the relations have the same arity. Therfore, $n$
     is the arity of any of the involved relations.

*** Relational algebra

**** TODO Permutation
     This constraint is an extension of the equality constraint
     presented in the previous section. It takes two relations $A$ and
     $B$ of the same arity and a description
     $\operatorname{desc}$. With these arguments it enforces that
     relation $A$ is equal to the relation $B$ permuted according to
     $\operatorname{desc}$.
     
     $\operatorname{desc}$ is a set of the form
     $\{\pair{a_{0}}{b_0},\ldots,\pair{a_{i}}{b_{i}}\}$, and indicates
     that column $a_{i}$ is permuted with column $b_{i}$. This is a
     constant argument, that is defined when the constraint is
     imposed.

     The semantics of this constraint can be expressed as:
     \begin{align*}
     A = \perm{B}{desc} \equiv \forall t : t \in A \iff \perm{t}{desc} \in B
     \end{align*}
     
     In this definition we state that a tuple is in $A$ if and only if
     the permutation of that tuple is in $B$. As you can see from its
     definition, this constraint is very similar to the equality
     constraint presented above. The propagation rules and the
     entailment condition are also similar.

     
**** TODO Projection
     This is the first constraint that is defined on relations of
     different arities. It takes as arguments two relations: $A
     \subseteq \universe{n}$ and $B \subseteq \universe{m}$. Apart
     from these relations it takes $c$, the number of columns on the
     right of $A$ that will be projected.
     \begin{align*}
     \proj{A}{c} = B \equiv & \\
     &\forall t : t \in A \iff t'\in B \; \land \\
     & \suffix{t'}{t} \; \land \; \arity{t'} = c
     \end{align*}
     
     The relation between the arity of the relation can be obtained by
     considering that:
     - Projecting a relations of $n$ columns on $c$ of them will give
       as result a relation of c columns. This of course assumes $n
       \leq c$.
     - As the result has to be equal to $B4, a relation of $m$
       columns, the only way for this to be semmantically defined is
       $m = n - a$.

     At first sight the use of $c$ can be seen as a limitation, after
     all a relation can be projected on any columns. This is not the
     case, because by using the Permutation constraint it is possible
     to put any set of columns at the right part of the relation. The
     reason for taking only the number of columns on the right is
     because it makes both the use of the constraint and its
     implementation simpler.

     The propagation rules for this constraint are as follows:
     - $\proj{\glb{A}}{c} \subseteq B$
     - $\proj{\lub{A}}{c} \supseteq B$
     - $\lub{A} \subseteq (\universe{\arity{A}-c}\times \lub{B}) \cap \lub{A}$
     
     In the rules before we still miss the pruning that can be done
     when a tuple known in $B$ can be supported by one and only one
     tuple in $A$. In this case, we need to include that support in
     $A$. For this we use unique quantification:
     \begin{align*}
       &\operatorname{Uq} = \{u : \exists !_{\overline{\{0,\ldots,c-1\}} u \in \lub{A}\} \cap \lub{A} \\
       &\include{A}{\operatorname{Uq} \cap (\glb{B} \times (\arity{A}-c))}
     \end{align*}
     

**** TODO Join
**** TODO Follow
**** TODO Follow-all

*** Channel
    A fundamental aspect of constraint programming in its practical
    usage is the ability to impose constraints on variables from
    different domains. This is for instance the case when an integer
    decision variable is constrained to be the cardinality of a set
    variable. These kind of constraints are usually called /channel
    constraints/.

    It is straighforward to see that a set variable and a relation
    variable of arity one represent the same. This is, we can see a
    set as a unary relation. This leads us to the first channel
    constraint.

**** TODO Channel betwen unary relation and set variables

     In a similar way to set and integer decision variables, we can
     constrain an integer variable to be the cardinality of a
     relation.

**** TODO Channel between integer variable and cardinality of a relation

**** TODO The tuple constraint system as a more natural way for channeling
* Applications
** Package management
** Music composition



    
